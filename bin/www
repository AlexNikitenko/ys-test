#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('ys-test:server');
const http = require('http');
const config = require('../config.json');

/**
 * Connecting to MongoDB via Mongoose
 */
 const mongoose = require('mongoose');
 const {
   dbhost,
   dbport,
   dbname,
   options
 } = require('../config/db');
 
 mongoose.connect(`mongodb://${dbhost}:${dbport}/${dbname}`, options);
 const db = mongoose.connection;
 
 db.on('error', (err) => {
   console.log('DB ERROR:', err);
 });
 
 db.once('open', () => {
   console.log(`Connected to DB, ${dbhost}:${dbport}/${dbname}`);
 });
 
 db.once('close', () => {
   console.log('Close connection to DB');
 });

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(config.port);
const hostname = config.hostname;

app.set('port', port);
app.set('hostname', hostname);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
